from asyncio import exceptions
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import Database
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import asyncio
import aiogram

bot = Bot(token="6692343081:AAFFpWhtupevNoZg67267MWpsYRNRIefycU", parse_mode='HTML')
sticker_id = "CAACAgIAAxkBAAEM_UdnE9lMW-wYlkzaF2DDSAYChi9ufwACAVsAAiUZoEgs8TFWd9ToZjYE"
admin_id = 1474037137
group_id = 1474037137
channelid = -1001635214395

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()

remove_keyboard_markup = types.ReplyKeyboardRemove()

class UserConfirmation(StatesGroup):
    confirmation = State()

@dp.chat_join_request_handler()
async def start1(update: types.ChatJoinRequest):
    confirm_button = KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    reply_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(confirm_button)
    user = update.from_user
    user_mention = user.get_mention()
    await update.bot.send_message(chat_id=user.id, text=f'<b>‚ÄºÔ∏è {user_mention}, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "<u>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</u>"</b>', reply_markup=reply_keyboard)
    state = dp.current_state(user=user.id)
    await state.set_state(UserConfirmation.confirmation)

@dp.message_handler(content_types=types.ContentType.TEXT, text=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'])
async def confirm_user(message: types.Message, state: FSMContext):
    await bot.approve_chat_join_request(chat_id=channelid, user_id=message.from_user.id)
    usersf = db.get_user(message.from_user.id)
    accepted_message = f'<b>‚úÖ {message.from_user.get_mention()} —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –≤ <a href="https://t.me/VapeVyazma">—á–∞—Ç</a> –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\nüîó –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - <a href="https://t.me/VapeVyazma">—á–∞—Ç</a>\n\nüìÑ –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞, –ø—Ä–æ–ø–∏—à–∏ <u>/rules</u>\n\nüîù –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø–∏—à–∏ <u>/donat</u>\n\nüí¨ –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –ø—Ä–æ–ø–∏—à–∏ <u>/proect</u>\n\nüéÅ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –ø—Ä–æ–ø–∏—à–∏ <u>/present</u>\n\n‚ùì –î–ª—è —Å–≤—è–∑–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–æ–ø–∏—à–∏ <u>/help</u>\n\n‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–º–æ—â–∏ –≤ —Å–ª—É—á–∞–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–ø–∏—à–∏ <u>/start</u></b>'
    await message.answer_sticker(sticker_id)
    sent_message = await message.answer(accepted_message, disable_web_page_preview=True, reply_markup=remove_keyboard_markup)
    pinned_message = await bot.pin_chat_message(chat_id=message.chat.id, message_id=sent_message.message_id)
    if usersf is not None:
        db.add_user(message.from_user.id)
        await bot.send_message(chat_id=admin_id, text=f"<b>‚úÖ –ü—Ä–∏–Ω—è–ª–∏ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.get_mention()}")
    else:
        await bot.send_message(chat_id=admin_id, text=f"<b>‚úÖ –ü—Ä–∏–Ω—è–ª–∏ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.get_mention()}")
    await state.finish()

@dp.message_handler(content_types=[
    types.ContentType.PINNED_MESSAGE,
])
async def delete_system_messages(message: types.Message):
    if message.from_user.id:
        await message.delete()

@dp.message_handler(state=UserConfirmation.confirmation)
async def handle_confirmation(message: types.Message,state=FSMContext):
    print(state)
    await message.answer('<b>‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <u>"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"</u></b>')

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    existing_user = db.get_user(message.from_user.id)
    await message.answer_sticker(sticker_id)
    await message.answer(f"<b>üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.get_mention()}\n\nüîó –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - <a href='https://t.me/VapeVyazma'>—á–∞—Ç</a>\n\nüìÑ –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞, –ø—Ä–æ–ø–∏—à–∏ <u>/rules</u>\n\nüîù –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø–∏—à–∏ <u>/donat</u>\n\nüí¨ –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –ø—Ä–æ–ø–∏—à–∏ <u>/proect</u>\n\nüéÅ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –ø—Ä–æ–ø–∏—à–∏ <u>/present</u>\n\n‚ùì –î–ª—è —Å–≤—è–∑–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–æ–ø–∏—à–∏ <u>/help</u>\n\n‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–º–æ—â–∏ –≤ —Å–ª—É—á–∞–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–ø–∏—à–∏ <u>/start</u></b>", disable_web_page_preview=True, reply_markup=remove_keyboard_markup)
    if existing_user is None:
        db.add_user(message.from_user.id)

@dp.message_handler(content_types="new_chat_members")
async def on_user_join(message: types.Message):
    await message.delete()
    await bot.send_message(chat_id=admin_id, text=f'‚úÖ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —á–∞—Ç–µ:\n\n'
                                               f'{message.from_user.get_mention()} | {message.from_user.full_name}\n'
                                               f'Id: {message.from_user.id}\n'
                                               f'Username: @{message.from_user.username}\n'
                                               )
    new_msg = await message.answer(f'{message.from_user.get_mention()} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!', disable_web_page_preview=True)
    await asyncio.sleep(15)
    try:
        await new_msg.delete()
    except Exception as e:
        pass

@dp.message_handler(content_types="left_chat_member")
async def on_user_join(message: types.Message):
    await message.delete()

@dp.message_handler(content_types="new_chat_title")
async def on_user_join(message: types.Message):
    await message.delete()

@dp.message_handler(content_types="new_chat_photo")
async def on_user_join(message: types.Message):
    await message.delete()

@dp.message_handler(content_types="delete_chat_photo")
async def on_user_join(message: types.Message):
    await message.delete()

@dp.message_handler(commands=['send'])
async def send_all_users(message: types.Message):
    if message.from_user.id == admin_id:
        users = db.get_users()
        successful_sends = 0
        failed_sends = 0
        text_to_send = f"<blockquote>{message.text.replace('/send ', '')}</blockquote>"
        for user in users:
            try:
                await bot.send_message(chat_id=user[0], text=text_to_send, parse_mode='HTML')
                await asyncio.sleep(0.5)
                successful_sends += 1
            except aiogram.utils.exceptions.TelegramAPIError as e:
                failed_sends += 1
        await bot.send_message(chat_id=admin_id, text=f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {successful_sends}\n–°–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: {failed_sends}")

@dp.message_handler(content_types=['photo', 'video', 'document', 'text'], chat_id=group_id)
async def handle_comment(message: types.Message):
    if message.from_user.id != 777000:
        pass
    elif message.chat.id != group_id:
        pass
    else:
        await message.reply("+", disable_web_page_preview=True)

class SupportStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()

@dp.message_handler(commands=['rules'])
async def send_rules(message: types.Message):
    try:
        message_id = 30
        await bot.forward_message(chat_id=message.from_user.id, from_chat_id=channelid, message_id=message_id)
    except exceptions.ChatNotFound:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except exceptions.MessageNotFound:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message, state: FSMContext):
    await message.answer(f"<b>‚úâÔ∏è –î–ª—è <u>—Å–≤—è–∑–∏</u> —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–≤–æ–π <u>–≤–æ–ø—Ä–æ—Å</u> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç</b>")
    await SupportStates.waiting_for_question.set()

@dp.message_handler(state=SupportStates.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext):
    await bot.send_message(
        chat_id=admin_id,
        text=f"<b>‚ùì –ù–æ–≤—ã–π <u>–≤–æ–ø—Ä–æ—Å</u> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> \n{message.from_user.get_mention()}\n\n<blockquote>{message.text}</blockquote>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}"),
            InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"finish_{message.from_user.id}")
        )
    )
    await message.answer(f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ <u>–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</u> –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, <u>–æ–∂–∏–¥–∞–π—Ç–µ</u> –æ—Ç–≤–µ—Ç–∞</b>")
    await state.finish()

@dp.message_handler(commands=['donat'])
async def handle_donat_command(message: types.Message):
    inline_keyboard = InlineKeyboardMarkup()
    purchase_button = InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è", url="https://t.me/interdine")
    inline_keyboard.add(purchase_button)
    await message.answer(
        f"<b>üîù –î–ª—è <u>–ø–æ–∫—É–ø–∫–∏</u> –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ <u>–æ–±—ä—è–≤–ª–µ–Ω–∏—è</u>, <u>—É—Å–ª—É–≥–∏</u> –∏–ª–∏ <u>–ø—Ä–µ—Ñ–∏–∫—Å–∞</u> –≤ —á–∞—Ç–µ, <u>—Å–≤—è–∂–∏—Ç–µ—Å—å</u> —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ <u>–∫–Ω–æ–ø–∫—É</u> –Ω–∏–∂–µ</b>",
        reply_markup=inline_keyboard
    )

@dp.message_handler(commands=['proect'])
async def handle_proect_command(message: types.Message):
    await message.answer(
        f"<b>üí¨ –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º —á–∞—Ç –∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–µ–≥–æ\n\n"
        f"üö¨ <a href='https://t.me/VapeVyazma'>vape –±–∞—Ä–∞—Ö–æ–ª–∫–∞ | –≤—è–∑—å–º–∞</a>\n"
        f"üí¨ <a href='https://t.me/ChatsVyazma'>—á–∞—Ç –æ–±—â–µ–Ω–∏—è | –≤—è–∑—å–º–∞</a>\n"
        f"üì¢ <a href='https://t.me/FleamarketVyazma'>–±–∞—Ä–∞—Ö–æ–ª–∫–∞ | –≤—è–∑—å–º–∞</a>\n"
        f"üöì <a href='https://t.me/+PESSI5xVBKJiZmUy'>–±–µ–∑ –≥–∞–∏ | –≤—è–∑—å–º–∞</a></b>",
        disable_web_page_preview=True
    )

@dp.message_handler(commands=['present'])
async def handle_present_command(message: types.Message):
    await message.answer(f"<b>‚ùé –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö <u>—Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</u>, <u>–Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ</u> –±–æ—Ç–∞ –∏ <u>–Ω–µ —É–¥–∞–ª—è–π—Ç–µ</u> —á–∞—Ç, —á—Ç–æ–±—ã –º—ã <u>—Å–º–æ–≥–ª–∏</u> <u>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</u> –≤–∞–º <u>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</u> –æ –Ω–æ–≤–æ–º <u>—Ä–æ–∑—ã–≥—Ä—ã—à–µ</u></b>")

@dp.message_handler(content_types=[
    types.ContentType.NEW_CHAT_MEMBERS,        # –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    types.ContentType.LEFT_CHAT_MEMBER,        # –£—à–µ–¥—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫
    types.ContentType.NEW_CHAT_TITLE,          # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    types.ContentType.NEW_CHAT_PHOTO,          # –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —á–∞—Ç–∞
    types.ContentType.DELETE_CHAT_PHOTO,       # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–∞—Ç–∞
    types.ContentType.GROUP_CHAT_CREATED,      # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    types.ContentType.MIGRATE_TO_CHAT_ID,      # –ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Ç–∞
    types.ContentType.MIGRATE_FROM_CHAT_ID,    # –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —á–∞—Ç–∞
    types.ContentType.PINNED_MESSAGE,          # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

])
async def delete_system_messages(message: types.Message):
    if message.chat.id == channelid:
        await message.delete()

@dp.message_handler(lambda message: message.reply_to_message and message.reply_to_message.text.startswith("üÜò –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç"), state="*")
async def handle_answer(message: types.Message, state: FSMContext):
    original_question = message.reply_to_message.text.split(":\n\n", 1)[1]
    user_id = message.reply_to_message.from_user.id
    await bot.send_message(
        chat_id=user_id, 
        text=f"<b>üì© <u>–û—Ç–≤–µ—Ç</u> –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n<blockquote>{message.text}</blockquote>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"),
            InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"finish_{user_id}")
        )
    )

@dp.callback_query_handler(lambda c: c.data.startswith('finish_'))
async def finish_dialog(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    is_admin = (callback_query.from_user.id == admin_id)
    if is_admin:
        await bot.send_message(user_id, f"<b>‚ùé <u>–î–∏–∞–ª–æ–≥></u> —Å –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ <u>–∑–∞–≤–µ—Ä—à–µ–Ω></u></b>")
    else:
        await bot.send_message(admin_id, f"<b>‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <u>–∑–∞–≤–µ—Ä—à–∏–ª</u> –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏</b>")
    await bot.answer_callback_query(callback_query.id)
    await dp.current_state(user=user_id).finish()

@dp.callback_query_handler(lambda c: c.data.startswith('reply_'))
async def reply_to_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await bot.send_message(callback_query.from_user.id, "<b>‚úâÔ∏è <u>–ù–∞–ø–∏—à–∏—Ç–µ</u> —Å–≤–æ–π –æ—Ç–≤–µ—Ç <u>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</u></b>")
    await dp.current_state(user=callback_query.from_user.id).update_data(original_user_id=user_id)
    await dp.current_state(user=callback_query.from_user.id).set_state("waiting_for_reply")

@dp.message_handler(state="waiting_for_reply")
async def process_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    original_user_id = data.get("original_user_id")
    try:
        await bot.send_message(
            original_user_id,
            f"<b>üì© <u>–û—Ç–≤–µ—Ç</u> –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n<blockquote>{message.text}</blockquote>"
        )
        await message.answer("<b>‚úÖ –û—Ç–≤–µ—Ç <u>–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</u> <u>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</u></b>")
    except exceptions.ChatNotFound:
        await message.answer("<b>üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç.</b>")
    except Exception as e:
        await message.answer(f"<b>üö© –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}</b>")
    await state.finish()
    
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        db.close()